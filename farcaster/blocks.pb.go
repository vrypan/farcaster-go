// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.32.0
// source: blocks.proto

package farcaster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Consensus messages
type VoteType int32

const (
	VoteType_PREVOTE   VoteType = 0
	VoteType_PRECOMMIT VoteType = 1
)

// Enum value maps for VoteType.
var (
	VoteType_name = map[int32]string{
		0: "PREVOTE",
		1: "PRECOMMIT",
	}
	VoteType_value = map[string]int32{
		"PREVOTE":   0,
		"PRECOMMIT": 1,
	}
)

func (x VoteType) Enum() *VoteType {
	p := new(VoteType)
	*p = x
	return p
}

func (x VoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_blocks_proto_enumTypes[0].Descriptor()
}

func (VoteType) Type() protoreflect.EnumType {
	return &file_blocks_proto_enumTypes[0]
}

func (x VoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteType.Descriptor instead.
func (VoteType) EnumDescriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{0}
}

type BlockEventType int32

const (
	BlockEventType_BLOCK_EVENT_TYPE_HEARTBEAT     BlockEventType = 0
	BlockEventType_BLOCK_EVENT_TYPE_MERGE_MESSAGE BlockEventType = 1
)

// Enum value maps for BlockEventType.
var (
	BlockEventType_name = map[int32]string{
		0: "BLOCK_EVENT_TYPE_HEARTBEAT",
		1: "BLOCK_EVENT_TYPE_MERGE_MESSAGE",
	}
	BlockEventType_value = map[string]int32{
		"BLOCK_EVENT_TYPE_HEARTBEAT":     0,
		"BLOCK_EVENT_TYPE_MERGE_MESSAGE": 1,
	}
)

func (x BlockEventType) Enum() *BlockEventType {
	p := new(BlockEventType)
	*p = x
	return p
}

func (x BlockEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_blocks_proto_enumTypes[1].Descriptor()
}

func (BlockEventType) Type() protoreflect.EnumType {
	return &file_blocks_proto_enumTypes[1]
}

func (x BlockEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockEventType.Descriptor instead.
func (BlockEventType) EnumDescriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{1}
}

type Validator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fid           uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Signer        []byte                 `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	RpcAddress    string                 `protobuf:"bytes,3,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
	ShardIndex    uint32                 `protobuf:"varint,4,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty"`
	CurrentHeight uint64                 `protobuf:"varint,5,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Validator) Reset() {
	*x = Validator{}
	mi := &file_blocks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{0}
}

func (x *Validator) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Validator) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *Validator) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

func (x *Validator) GetShardIndex() uint32 {
	if x != nil {
		return x.ShardIndex
	}
	return 0
}

func (x *Validator) GetCurrentHeight() uint64 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

type ValidatorSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Validators    []*Validator           `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorSet) Reset() {
	*x = ValidatorSet{}
	mi := &file_blocks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSet) ProtoMessage() {}

func (x *ValidatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSet.ProtoReflect.Descriptor instead.
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{1}
}

func (x *ValidatorSet) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type Height struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShardIndex    uint32                 `protobuf:"varint,1,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty"`
	BlockNumber   uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Height) Reset() {
	*x = Height{}
	mi := &file_blocks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Height) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Height) ProtoMessage() {}

func (x *Height) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Height.ProtoReflect.Descriptor instead.
func (*Height) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{2}
}

func (x *Height) GetShardIndex() uint32 {
	if x != nil {
		return x.ShardIndex
	}
	return 0
}

func (x *Height) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

// Uniquely identifies a hash within a shard
type ShardHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShardIndex    uint32                 `protobuf:"varint,1,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardHash) Reset() {
	*x = ShardHash{}
	mi := &file_blocks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardHash) ProtoMessage() {}

func (x *ShardHash) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardHash.ProtoReflect.Descriptor instead.
func (*ShardHash) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{3}
}

func (x *ShardHash) GetShardIndex() uint32 {
	if x != nil {
		return x.ShardIndex
	}
	return 0
}

func (x *ShardHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          VoteType               `protobuf:"varint,1,opt,name=type,proto3,enum=VoteType" json:"type,omitempty"`
	Height        *Height                `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	Round         int64                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Value         *ShardHash             `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Voter         []byte                 `protobuf:"bytes,5,opt,name=voter,proto3" json:"voter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_blocks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{4}
}

func (x *Vote) GetType() VoteType {
	if x != nil {
		return x.Type
	}
	return VoteType_PREVOTE
}

func (x *Vote) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *Vote) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Vote) GetValue() *ShardHash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Vote) GetVoter() []byte {
	if x != nil {
		return x.Voter
	}
	return nil
}

type CommitSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signer        []byte                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitSignature) Reset() {
	*x = CommitSignature{}
	mi := &file_blocks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSignature) ProtoMessage() {}

func (x *CommitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSignature.ProtoReflect.Descriptor instead.
func (*CommitSignature) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{5}
}

func (x *CommitSignature) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *CommitSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Commits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int64                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Value         *ShardHash             `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Signatures    []*CommitSignature     `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commits) Reset() {
	*x = Commits{}
	mi := &file_blocks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commits) ProtoMessage() {}

func (x *Commits) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commits.ProtoReflect.Descriptor instead.
func (*Commits) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{6}
}

func (x *Commits) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *Commits) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Commits) GetValue() *ShardHash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Commits) GetSignatures() []*CommitSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type Proposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int64                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	PolRound      int64                  `protobuf:"varint,3,opt,name=pol_round,json=polRound,proto3" json:"pol_round,omitempty"`
	Proposer      []byte                 `protobuf:"bytes,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Value         *ShardHash             `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	mi := &file_blocks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{7}
}

func (x *Proposal) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *Proposal) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Proposal) GetPolRound() int64 {
	if x != nil {
		return x.PolRound
	}
	return 0
}

func (x *Proposal) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *Proposal) GetValue() *ShardHash {
	if x != nil {
		return x.Value
	}
	return nil
}

// TODO: This probably needs a signature? Should we use ConsensusMessage?
type FullProposal struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Height   *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Round    int64                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Proposer []byte                 `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// Types that are valid to be assigned to ProposedValue:
	//
	//	*FullProposal_Block
	//	*FullProposal_Shard
	ProposedValue isFullProposal_ProposedValue `protobuf_oneof:"proposed_value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullProposal) Reset() {
	*x = FullProposal{}
	mi := &file_blocks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullProposal) ProtoMessage() {}

func (x *FullProposal) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullProposal.ProtoReflect.Descriptor instead.
func (*FullProposal) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{8}
}

func (x *FullProposal) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *FullProposal) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *FullProposal) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *FullProposal) GetProposedValue() isFullProposal_ProposedValue {
	if x != nil {
		return x.ProposedValue
	}
	return nil
}

func (x *FullProposal) GetBlock() *Block {
	if x != nil {
		if x, ok := x.ProposedValue.(*FullProposal_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *FullProposal) GetShard() *ShardChunk {
	if x != nil {
		if x, ok := x.ProposedValue.(*FullProposal_Shard); ok {
			return x.Shard
		}
	}
	return nil
}

type isFullProposal_ProposedValue interface {
	isFullProposal_ProposedValue()
}

type FullProposal_Block struct {
	Block *Block `protobuf:"bytes,4,opt,name=block,proto3,oneof"`
}

type FullProposal_Shard struct {
	Shard *ShardChunk `protobuf:"bytes,5,opt,name=shard,proto3,oneof"`
}

func (*FullProposal_Block) isFullProposal_ProposedValue() {}

func (*FullProposal_Shard) isFullProposal_ProposedValue() {}

type DecidedValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*DecidedValue_Block
	//	*DecidedValue_Shard
	Value         isDecidedValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecidedValue) Reset() {
	*x = DecidedValue{}
	mi := &file_blocks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecidedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecidedValue) ProtoMessage() {}

func (x *DecidedValue) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecidedValue.ProtoReflect.Descriptor instead.
func (*DecidedValue) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{9}
}

func (x *DecidedValue) GetValue() isDecidedValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecidedValue) GetBlock() *Block {
	if x != nil {
		if x, ok := x.Value.(*DecidedValue_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *DecidedValue) GetShard() *ShardChunk {
	if x != nil {
		if x, ok := x.Value.(*DecidedValue_Shard); ok {
			return x.Shard
		}
	}
	return nil
}

type isDecidedValue_Value interface {
	isDecidedValue_Value()
}

type DecidedValue_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type DecidedValue_Shard struct {
	Shard *ShardChunk `protobuf:"bytes,3,opt,name=shard,proto3,oneof"`
}

func (*DecidedValue_Block) isDecidedValue_Value() {}

func (*DecidedValue_Shard) isDecidedValue_Value() {}

type ReadNodeMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ReadNodeMessage:
	//
	//	*ReadNodeMessage_DecidedValue
	ReadNodeMessage isReadNodeMessage_ReadNodeMessage `protobuf_oneof:"read_node_message"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReadNodeMessage) Reset() {
	*x = ReadNodeMessage{}
	mi := &file_blocks_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadNodeMessage) ProtoMessage() {}

func (x *ReadNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadNodeMessage.ProtoReflect.Descriptor instead.
func (*ReadNodeMessage) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{10}
}

func (x *ReadNodeMessage) GetReadNodeMessage() isReadNodeMessage_ReadNodeMessage {
	if x != nil {
		return x.ReadNodeMessage
	}
	return nil
}

func (x *ReadNodeMessage) GetDecidedValue() *DecidedValue {
	if x != nil {
		if x, ok := x.ReadNodeMessage.(*ReadNodeMessage_DecidedValue); ok {
			return x.DecidedValue
		}
	}
	return nil
}

type isReadNodeMessage_ReadNodeMessage interface {
	isReadNodeMessage_ReadNodeMessage()
}

type ReadNodeMessage_DecidedValue struct {
	DecidedValue *DecidedValue `protobuf:"bytes,1,opt,name=decided_value,json=decidedValue,proto3,oneof"`
}

func (*ReadNodeMessage_DecidedValue) isReadNodeMessage_ReadNodeMessage() {}

type ConsensusMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConsensusMessage:
	//
	//	*ConsensusMessage_Vote
	//	*ConsensusMessage_Proposal
	ConsensusMessage isConsensusMessage_ConsensusMessage `protobuf_oneof:"consensus_message"`
	Signature        []byte                              `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConsensusMessage) Reset() {
	*x = ConsensusMessage{}
	mi := &file_blocks_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMessage) ProtoMessage() {}

func (x *ConsensusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMessage.ProtoReflect.Descriptor instead.
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{11}
}

func (x *ConsensusMessage) GetConsensusMessage() isConsensusMessage_ConsensusMessage {
	if x != nil {
		return x.ConsensusMessage
	}
	return nil
}

func (x *ConsensusMessage) GetVote() *Vote {
	if x != nil {
		if x, ok := x.ConsensusMessage.(*ConsensusMessage_Vote); ok {
			return x.Vote
		}
	}
	return nil
}

func (x *ConsensusMessage) GetProposal() *Proposal {
	if x != nil {
		if x, ok := x.ConsensusMessage.(*ConsensusMessage_Proposal); ok {
			return x.Proposal
		}
	}
	return nil
}

func (x *ConsensusMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type isConsensusMessage_ConsensusMessage interface {
	isConsensusMessage_ConsensusMessage()
}

type ConsensusMessage_Vote struct {
	Vote *Vote `protobuf:"bytes,1,opt,name=vote,proto3,oneof"`
}

type ConsensusMessage_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,2,opt,name=proposal,proto3,oneof"`
}

func (*ConsensusMessage_Vote) isConsensusMessage_ConsensusMessage() {}

func (*ConsensusMessage_Proposal) isConsensusMessage_ConsensusMessage() {}

type HeartbeatEventBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatEventBody) Reset() {
	*x = HeartbeatEventBody{}
	mi := &file_blocks_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatEventBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatEventBody) ProtoMessage() {}

func (x *HeartbeatEventBody) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatEventBody.ProtoReflect.Descriptor instead.
func (*HeartbeatEventBody) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{12}
}

type MergeMessageEventBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *Message               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeMessageEventBody) Reset() {
	*x = MergeMessageEventBody{}
	mi := &file_blocks_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeMessageEventBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeMessageEventBody) ProtoMessage() {}

func (x *MergeMessageEventBody) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeMessageEventBody.ProtoReflect.Descriptor instead.
func (*MergeMessageEventBody) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{13}
}

func (x *MergeMessageEventBody) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type BlockEventData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Seqnum         uint64                 `protobuf:"varint,1,opt,name=seqnum,proto3" json:"seqnum,omitempty"`
	Type           BlockEventType         `protobuf:"varint,2,opt,name=type,proto3,enum=BlockEventType" json:"type,omitempty"`
	BlockNumber    uint64                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	EventIndex     uint64                 `protobuf:"varint,4,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	BlockTimestamp uint64                 `protobuf:"varint,5,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	// Types that are valid to be assigned to Body:
	//
	//	*BlockEventData_HeartbeatEventBody
	//	*BlockEventData_MergeMessageEventBody
	Body          isBlockEventData_Body `protobuf_oneof:"body"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockEventData) Reset() {
	*x = BlockEventData{}
	mi := &file_blocks_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockEventData) ProtoMessage() {}

func (x *BlockEventData) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockEventData.ProtoReflect.Descriptor instead.
func (*BlockEventData) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{14}
}

func (x *BlockEventData) GetSeqnum() uint64 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

func (x *BlockEventData) GetType() BlockEventType {
	if x != nil {
		return x.Type
	}
	return BlockEventType_BLOCK_EVENT_TYPE_HEARTBEAT
}

func (x *BlockEventData) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockEventData) GetEventIndex() uint64 {
	if x != nil {
		return x.EventIndex
	}
	return 0
}

func (x *BlockEventData) GetBlockTimestamp() uint64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

func (x *BlockEventData) GetBody() isBlockEventData_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *BlockEventData) GetHeartbeatEventBody() *HeartbeatEventBody {
	if x != nil {
		if x, ok := x.Body.(*BlockEventData_HeartbeatEventBody); ok {
			return x.HeartbeatEventBody
		}
	}
	return nil
}

func (x *BlockEventData) GetMergeMessageEventBody() *MergeMessageEventBody {
	if x != nil {
		if x, ok := x.Body.(*BlockEventData_MergeMessageEventBody); ok {
			return x.MergeMessageEventBody
		}
	}
	return nil
}

type isBlockEventData_Body interface {
	isBlockEventData_Body()
}

type BlockEventData_HeartbeatEventBody struct {
	HeartbeatEventBody *HeartbeatEventBody `protobuf:"bytes,6,opt,name=heartbeat_event_body,json=heartbeatEventBody,proto3,oneof"`
}

type BlockEventData_MergeMessageEventBody struct {
	MergeMessageEventBody *MergeMessageEventBody `protobuf:"bytes,7,opt,name=merge_message_event_body,json=mergeMessageEventBody,proto3,oneof"`
}

func (*BlockEventData_HeartbeatEventBody) isBlockEventData_Body() {}

func (*BlockEventData_MergeMessageEventBody) isBlockEventData_Body() {}

type BlockEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Data          *BlockEventData        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockEvent) Reset() {
	*x = BlockEvent{}
	mi := &file_blocks_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockEvent) ProtoMessage() {}

func (x *BlockEvent) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockEvent.ProtoReflect.Descriptor instead.
func (*BlockEvent) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{15}
}

func (x *BlockEvent) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockEvent) GetData() *BlockEventData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Block types
type BlockHeader struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Height             *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp          uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version            uint32                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ChainId            FarcasterNetwork       `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3,enum=FarcasterNetwork" json:"chain_id,omitempty"`
	ShardWitnessesHash []byte                 `protobuf:"bytes,5,opt,name=shard_witnesses_hash,json=shardWitnessesHash,proto3" json:"shard_witnesses_hash,omitempty"`
	ParentHash         []byte                 `protobuf:"bytes,6,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	StateRoot          []byte                 `protobuf:"bytes,7,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	EventsHash         []byte                 `protobuf:"bytes,8,opt,name=events_hash,json=eventsHash,proto3" json:"events_hash,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	mi := &file_blocks_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{16}
}

func (x *BlockHeader) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BlockHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeader) GetChainId() FarcasterNetwork {
	if x != nil {
		return x.ChainId
	}
	return FarcasterNetwork_FARCASTER_NETWORK_NONE
}

func (x *BlockHeader) GetShardWitnessesHash() []byte {
	if x != nil {
		return x.ShardWitnessesHash
	}
	return nil
}

func (x *BlockHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BlockHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BlockHeader) GetEventsHash() []byte {
	if x != nil {
		return x.EventsHash
	}
	return nil
}

type ShardWitness struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ShardChunkWitnesses []*ShardChunkWitness   `protobuf:"bytes,1,rep,name=shard_chunk_witnesses,json=shardChunkWitnesses,proto3" json:"shard_chunk_witnesses,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ShardWitness) Reset() {
	*x = ShardWitness{}
	mi := &file_blocks_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardWitness) ProtoMessage() {}

func (x *ShardWitness) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardWitness.ProtoReflect.Descriptor instead.
func (*ShardWitness) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{17}
}

func (x *ShardWitness) GetShardChunkWitnesses() []*ShardChunkWitness {
	if x != nil {
		return x.ShardChunkWitnesses
	}
	return nil
}

type ShardChunkWitness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	ShardRoot     []byte                 `protobuf:"bytes,2,opt,name=shard_root,json=shardRoot,proto3" json:"shard_root,omitempty"`
	ShardHash     []byte                 `protobuf:"bytes,3,opt,name=shard_hash,json=shardHash,proto3" json:"shard_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardChunkWitness) Reset() {
	*x = ShardChunkWitness{}
	mi := &file_blocks_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardChunkWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardChunkWitness) ProtoMessage() {}

func (x *ShardChunkWitness) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardChunkWitness.ProtoReflect.Descriptor instead.
func (*ShardChunkWitness) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{18}
}

func (x *ShardChunkWitness) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *ShardChunkWitness) GetShardRoot() []byte {
	if x != nil {
		return x.ShardRoot
	}
	return nil
}

func (x *ShardChunkWitness) GetShardHash() []byte {
	if x != nil {
		return x.ShardHash
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *BlockHeader           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ShardWitness  *ShardWitness          `protobuf:"bytes,3,opt,name=shard_witness,json=shardWitness,proto3" json:"shard_witness,omitempty"`
	Commits       *Commits               `protobuf:"bytes,4,opt,name=commits,proto3" json:"commits,omitempty"`
	Transactions  []*Transaction         `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Events        []*BlockEvent          `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_blocks_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{19}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetShardWitness() *ShardWitness {
	if x != nil {
		return x.ShardWitness
	}
	return nil
}

func (x *Block) GetCommits() *Commits {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetEvents() []*BlockEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ShardHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ParentHash    []byte                 `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	ShardRoot     []byte                 `protobuf:"bytes,4,opt,name=shard_root,json=shardRoot,proto3" json:"shard_root,omitempty"` // State root for the shard after applying the transactions for the height
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardHeader) Reset() {
	*x = ShardHeader{}
	mi := &file_blocks_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardHeader) ProtoMessage() {}

func (x *ShardHeader) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardHeader.ProtoReflect.Descriptor instead.
func (*ShardHeader) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{20}
}

func (x *ShardHeader) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *ShardHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ShardHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ShardHeader) GetShardRoot() []byte {
	if x != nil {
		return x.ShardRoot
	}
	return nil
}

type ShardChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *ShardHeader           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Transactions  []*Transaction         `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Commits       *Commits               `protobuf:"bytes,4,opt,name=commits,proto3" json:"commits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardChunk) Reset() {
	*x = ShardChunk{}
	mi := &file_blocks_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardChunk) ProtoMessage() {}

func (x *ShardChunk) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardChunk.ProtoReflect.Descriptor instead.
func (*ShardChunk) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{21}
}

func (x *ShardChunk) GetHeader() *ShardHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ShardChunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ShardChunk) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ShardChunk) GetCommits() *Commits {
	if x != nil {
		return x.Commits
	}
	return nil
}

type Transaction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Fid            uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	UserMessages   []*Message             `protobuf:"bytes,2,rep,name=user_messages,json=userMessages,proto3" json:"user_messages,omitempty"`
	SystemMessages []*ValidatorMessage    `protobuf:"bytes,3,rep,name=system_messages,json=systemMessages,proto3" json:"system_messages,omitempty"`
	AccountRoot    []byte                 `protobuf:"bytes,4,opt,name=account_root,json=accountRoot,proto3" json:"account_root,omitempty"` // State root for the account after applying the transaction for the fid
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_blocks_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{22}
}

func (x *Transaction) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Transaction) GetUserMessages() []*Message {
	if x != nil {
		return x.UserMessages
	}
	return nil
}

func (x *Transaction) GetSystemMessages() []*ValidatorMessage {
	if x != nil {
		return x.SystemMessages
	}
	return nil
}

func (x *Transaction) GetAccountRoot() []byte {
	if x != nil {
		return x.AccountRoot
	}
	return nil
}

// Fname transfers
type FnameTransfer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FromFid       uint64                 `protobuf:"varint,2,opt,name=from_fid,json=fromFid,proto3" json:"from_fid,omitempty"`
	Proof         *UserNameProof         `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FnameTransfer) Reset() {
	*x = FnameTransfer{}
	mi := &file_blocks_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FnameTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FnameTransfer) ProtoMessage() {}

func (x *FnameTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FnameTransfer.ProtoReflect.Descriptor instead.
func (*FnameTransfer) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{23}
}

func (x *FnameTransfer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FnameTransfer) GetFromFid() uint64 {
	if x != nil {
		return x.FromFid
	}
	return 0
}

func (x *FnameTransfer) GetProof() *UserNameProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Validator initiated prunes/revokes etc
type ValidatorMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnChainEvent  *OnChainEvent          `protobuf:"bytes,1,opt,name=on_chain_event,json=onChainEvent,proto3" json:"on_chain_event,omitempty"`
	FnameTransfer *FnameTransfer         `protobuf:"bytes,2,opt,name=fname_transfer,json=fnameTransfer,proto3" json:"fname_transfer,omitempty"`
	BlockEvent    *BlockEvent            `protobuf:"bytes,3,opt,name=block_event,json=blockEvent,proto3" json:"block_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorMessage) Reset() {
	*x = ValidatorMessage{}
	mi := &file_blocks_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorMessage) ProtoMessage() {}

func (x *ValidatorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorMessage.ProtoReflect.Descriptor instead.
func (*ValidatorMessage) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{24}
}

func (x *ValidatorMessage) GetOnChainEvent() *OnChainEvent {
	if x != nil {
		return x.OnChainEvent
	}
	return nil
}

func (x *ValidatorMessage) GetFnameTransfer() *FnameTransfer {
	if x != nil {
		return x.FnameTransfer
	}
	return nil
}

func (x *ValidatorMessage) GetBlockEvent() *BlockEvent {
	if x != nil {
		return x.BlockEvent
	}
	return nil
}

// Gossip related messages
type MempoolMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MempoolMessage:
	//
	//	*MempoolMessage_UserMessage
	MempoolMessage isMempoolMessage_MempoolMessage `protobuf_oneof:"mempool_message"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MempoolMessage) Reset() {
	*x = MempoolMessage{}
	mi := &file_blocks_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MempoolMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolMessage) ProtoMessage() {}

func (x *MempoolMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolMessage.ProtoReflect.Descriptor instead.
func (*MempoolMessage) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{25}
}

func (x *MempoolMessage) GetMempoolMessage() isMempoolMessage_MempoolMessage {
	if x != nil {
		return x.MempoolMessage
	}
	return nil
}

func (x *MempoolMessage) GetUserMessage() *Message {
	if x != nil {
		if x, ok := x.MempoolMessage.(*MempoolMessage_UserMessage); ok {
			return x.UserMessage
		}
	}
	return nil
}

type isMempoolMessage_MempoolMessage interface {
	isMempoolMessage_MempoolMessage()
}

type MempoolMessage_UserMessage struct {
	UserMessage *Message `protobuf:"bytes,1,opt,name=user_message,json=userMessage,proto3,oneof"`
}

func (*MempoolMessage_UserMessage) isMempoolMessage_MempoolMessage() {}

type StatusMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        []byte                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Height        *Height                `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	MinHeight     *Height                `protobuf:"bytes,3,opt,name=min_height,json=minHeight,proto3" json:"min_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	mi := &file_blocks_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{26}
}

func (x *StatusMessage) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *StatusMessage) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *StatusMessage) GetMinHeight() *Height {
	if x != nil {
		return x.MinHeight
	}
	return nil
}

type SyncValueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncValueRequest) Reset() {
	*x = SyncValueRequest{}
	mi := &file_blocks_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncValueRequest) ProtoMessage() {}

func (x *SyncValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncValueRequest.ProtoReflect.Descriptor instead.
func (*SyncValueRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{27}
}

func (x *SyncValueRequest) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

type SyncVoteSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int64                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncVoteSetRequest) Reset() {
	*x = SyncVoteSetRequest{}
	mi := &file_blocks_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncVoteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVoteSetRequest) ProtoMessage() {}

func (x *SyncVoteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVoteSetRequest.ProtoReflect.Descriptor instead.
func (*SyncVoteSetRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{28}
}

func (x *SyncVoteSetRequest) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *SyncVoteSetRequest) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

type SyncRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to SyncRequest:
	//
	//	*SyncRequest_Value
	//	*SyncRequest_VoteSet
	SyncRequest   isSyncRequest_SyncRequest `protobuf_oneof:"sync_request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	mi := &file_blocks_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{29}
}

func (x *SyncRequest) GetSyncRequest() isSyncRequest_SyncRequest {
	if x != nil {
		return x.SyncRequest
	}
	return nil
}

func (x *SyncRequest) GetValue() *SyncValueRequest {
	if x != nil {
		if x, ok := x.SyncRequest.(*SyncRequest_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *SyncRequest) GetVoteSet() *SyncVoteSetRequest {
	if x != nil {
		if x, ok := x.SyncRequest.(*SyncRequest_VoteSet); ok {
			return x.VoteSet
		}
	}
	return nil
}

type isSyncRequest_SyncRequest interface {
	isSyncRequest_SyncRequest()
}

type SyncRequest_Value struct {
	Value *SyncValueRequest `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type SyncRequest_VoteSet struct {
	VoteSet *SyncVoteSetRequest `protobuf:"bytes,2,opt,name=vote_set,json=voteSet,proto3,oneof"`
}

func (*SyncRequest_Value) isSyncRequest_SyncRequest() {}

func (*SyncRequest_VoteSet) isSyncRequest_SyncRequest() {}

type SyncValueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	FullValue     []byte                 `protobuf:"bytes,2,opt,name=full_value,json=fullValue,proto3" json:"full_value,omitempty"`
	Commits       *Commits               `protobuf:"bytes,3,opt,name=commits,proto3" json:"commits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncValueResponse) Reset() {
	*x = SyncValueResponse{}
	mi := &file_blocks_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncValueResponse) ProtoMessage() {}

func (x *SyncValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncValueResponse.ProtoReflect.Descriptor instead.
func (*SyncValueResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{30}
}

func (x *SyncValueResponse) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *SyncValueResponse) GetFullValue() []byte {
	if x != nil {
		return x.FullValue
	}
	return nil
}

func (x *SyncValueResponse) GetCommits() *Commits {
	if x != nil {
		return x.Commits
	}
	return nil
}

type SyncVoteSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        *Height                `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int64                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Votes         []*Vote                `protobuf:"bytes,3,rep,name=votes,proto3" json:"votes,omitempty"`
	Signatures    [][]byte               `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncVoteSetResponse) Reset() {
	*x = SyncVoteSetResponse{}
	mi := &file_blocks_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncVoteSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVoteSetResponse) ProtoMessage() {}

func (x *SyncVoteSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVoteSetResponse.ProtoReflect.Descriptor instead.
func (*SyncVoteSetResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{31}
}

func (x *SyncVoteSetResponse) GetHeight() *Height {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *SyncVoteSetResponse) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SyncVoteSetResponse) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *SyncVoteSetResponse) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SyncResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to SyncResponse:
	//
	//	*SyncResponse_Value
	//	*SyncResponse_VoteSet
	SyncResponse  isSyncResponse_SyncResponse `protobuf_oneof:"sync_response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	mi := &file_blocks_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{32}
}

func (x *SyncResponse) GetSyncResponse() isSyncResponse_SyncResponse {
	if x != nil {
		return x.SyncResponse
	}
	return nil
}

func (x *SyncResponse) GetValue() *SyncValueResponse {
	if x != nil {
		if x, ok := x.SyncResponse.(*SyncResponse_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *SyncResponse) GetVoteSet() *SyncVoteSetResponse {
	if x != nil {
		if x, ok := x.SyncResponse.(*SyncResponse_VoteSet); ok {
			return x.VoteSet
		}
	}
	return nil
}

type isSyncResponse_SyncResponse interface {
	isSyncResponse_SyncResponse()
}

type SyncResponse_Value struct {
	Value *SyncValueResponse `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type SyncResponse_VoteSet struct {
	VoteSet *SyncVoteSetResponse `protobuf:"bytes,2,opt,name=vote_set,json=voteSet,proto3,oneof"`
}

func (*SyncResponse_Value) isSyncResponse_SyncResponse() {}

func (*SyncResponse_VoteSet) isSyncResponse_SyncResponse() {}

var File_blocks_proto protoreflect.FileDescriptor

var file_blocks_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3a, 0x0a, 0x0c, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x94, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c,
	0x46, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5c, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x3b, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x22, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x47, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x51, 0x0a, 0x18, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x45, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x02, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x61, 0x72, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x72, 0x0a,
	0x11, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xf0, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x22, 0x60, 0x0a, 0x0d, 0x46, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x0e, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0d, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x71, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x33, 0x0a, 0x10, 0x53, 0x79,
	0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x4b, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x7a, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x7e, 0x0a,
	0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x26, 0x0a,
	0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45,
	0x56, 0x4f, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52,
	0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_blocks_proto_rawDescOnce sync.Once
	file_blocks_proto_rawDescData []byte
)

func file_blocks_proto_rawDescGZIP() []byte {
	file_blocks_proto_rawDescOnce.Do(func() {
		file_blocks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blocks_proto_rawDesc), len(file_blocks_proto_rawDesc)))
	})
	return file_blocks_proto_rawDescData
}

var file_blocks_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_blocks_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_blocks_proto_goTypes = []any{
	(VoteType)(0),                 // 0: VoteType
	(BlockEventType)(0),           // 1: BlockEventType
	(*Validator)(nil),             // 2: Validator
	(*ValidatorSet)(nil),          // 3: ValidatorSet
	(*Height)(nil),                // 4: Height
	(*ShardHash)(nil),             // 5: ShardHash
	(*Vote)(nil),                  // 6: Vote
	(*CommitSignature)(nil),       // 7: CommitSignature
	(*Commits)(nil),               // 8: Commits
	(*Proposal)(nil),              // 9: Proposal
	(*FullProposal)(nil),          // 10: FullProposal
	(*DecidedValue)(nil),          // 11: DecidedValue
	(*ReadNodeMessage)(nil),       // 12: ReadNodeMessage
	(*ConsensusMessage)(nil),      // 13: ConsensusMessage
	(*HeartbeatEventBody)(nil),    // 14: HeartbeatEventBody
	(*MergeMessageEventBody)(nil), // 15: MergeMessageEventBody
	(*BlockEventData)(nil),        // 16: BlockEventData
	(*BlockEvent)(nil),            // 17: BlockEvent
	(*BlockHeader)(nil),           // 18: BlockHeader
	(*ShardWitness)(nil),          // 19: ShardWitness
	(*ShardChunkWitness)(nil),     // 20: ShardChunkWitness
	(*Block)(nil),                 // 21: Block
	(*ShardHeader)(nil),           // 22: ShardHeader
	(*ShardChunk)(nil),            // 23: ShardChunk
	(*Transaction)(nil),           // 24: Transaction
	(*FnameTransfer)(nil),         // 25: FnameTransfer
	(*ValidatorMessage)(nil),      // 26: ValidatorMessage
	(*MempoolMessage)(nil),        // 27: MempoolMessage
	(*StatusMessage)(nil),         // 28: StatusMessage
	(*SyncValueRequest)(nil),      // 29: SyncValueRequest
	(*SyncVoteSetRequest)(nil),    // 30: SyncVoteSetRequest
	(*SyncRequest)(nil),           // 31: SyncRequest
	(*SyncValueResponse)(nil),     // 32: SyncValueResponse
	(*SyncVoteSetResponse)(nil),   // 33: SyncVoteSetResponse
	(*SyncResponse)(nil),          // 34: SyncResponse
	(*Message)(nil),               // 35: Message
	(FarcasterNetwork)(0),         // 36: FarcasterNetwork
	(*UserNameProof)(nil),         // 37: UserNameProof
	(*OnChainEvent)(nil),          // 38: OnChainEvent
}
var file_blocks_proto_depIdxs = []int32{
	2,  // 0: ValidatorSet.validators:type_name -> Validator
	0,  // 1: Vote.type:type_name -> VoteType
	4,  // 2: Vote.height:type_name -> Height
	5,  // 3: Vote.value:type_name -> ShardHash
	4,  // 4: Commits.height:type_name -> Height
	5,  // 5: Commits.value:type_name -> ShardHash
	7,  // 6: Commits.signatures:type_name -> CommitSignature
	4,  // 7: Proposal.height:type_name -> Height
	5,  // 8: Proposal.value:type_name -> ShardHash
	4,  // 9: FullProposal.height:type_name -> Height
	21, // 10: FullProposal.block:type_name -> Block
	23, // 11: FullProposal.shard:type_name -> ShardChunk
	21, // 12: DecidedValue.block:type_name -> Block
	23, // 13: DecidedValue.shard:type_name -> ShardChunk
	11, // 14: ReadNodeMessage.decided_value:type_name -> DecidedValue
	6,  // 15: ConsensusMessage.vote:type_name -> Vote
	9,  // 16: ConsensusMessage.proposal:type_name -> Proposal
	35, // 17: MergeMessageEventBody.message:type_name -> Message
	1,  // 18: BlockEventData.type:type_name -> BlockEventType
	14, // 19: BlockEventData.heartbeat_event_body:type_name -> HeartbeatEventBody
	15, // 20: BlockEventData.merge_message_event_body:type_name -> MergeMessageEventBody
	16, // 21: BlockEvent.data:type_name -> BlockEventData
	4,  // 22: BlockHeader.height:type_name -> Height
	36, // 23: BlockHeader.chain_id:type_name -> FarcasterNetwork
	20, // 24: ShardWitness.shard_chunk_witnesses:type_name -> ShardChunkWitness
	4,  // 25: ShardChunkWitness.height:type_name -> Height
	18, // 26: Block.header:type_name -> BlockHeader
	19, // 27: Block.shard_witness:type_name -> ShardWitness
	8,  // 28: Block.commits:type_name -> Commits
	24, // 29: Block.transactions:type_name -> Transaction
	17, // 30: Block.events:type_name -> BlockEvent
	4,  // 31: ShardHeader.height:type_name -> Height
	22, // 32: ShardChunk.header:type_name -> ShardHeader
	24, // 33: ShardChunk.transactions:type_name -> Transaction
	8,  // 34: ShardChunk.commits:type_name -> Commits
	35, // 35: Transaction.user_messages:type_name -> Message
	26, // 36: Transaction.system_messages:type_name -> ValidatorMessage
	37, // 37: FnameTransfer.proof:type_name -> UserNameProof
	38, // 38: ValidatorMessage.on_chain_event:type_name -> OnChainEvent
	25, // 39: ValidatorMessage.fname_transfer:type_name -> FnameTransfer
	17, // 40: ValidatorMessage.block_event:type_name -> BlockEvent
	35, // 41: MempoolMessage.user_message:type_name -> Message
	4,  // 42: StatusMessage.height:type_name -> Height
	4,  // 43: StatusMessage.min_height:type_name -> Height
	4,  // 44: SyncValueRequest.height:type_name -> Height
	4,  // 45: SyncVoteSetRequest.height:type_name -> Height
	29, // 46: SyncRequest.value:type_name -> SyncValueRequest
	30, // 47: SyncRequest.vote_set:type_name -> SyncVoteSetRequest
	4,  // 48: SyncValueResponse.height:type_name -> Height
	8,  // 49: SyncValueResponse.commits:type_name -> Commits
	4,  // 50: SyncVoteSetResponse.height:type_name -> Height
	6,  // 51: SyncVoteSetResponse.votes:type_name -> Vote
	32, // 52: SyncResponse.value:type_name -> SyncValueResponse
	33, // 53: SyncResponse.vote_set:type_name -> SyncVoteSetResponse
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_blocks_proto_init() }
func file_blocks_proto_init() {
	if File_blocks_proto != nil {
		return
	}
	file_message_proto_init()
	file_username_proof_proto_init()
	file_onchain_event_proto_init()
	file_blocks_proto_msgTypes[8].OneofWrappers = []any{
		(*FullProposal_Block)(nil),
		(*FullProposal_Shard)(nil),
	}
	file_blocks_proto_msgTypes[9].OneofWrappers = []any{
		(*DecidedValue_Block)(nil),
		(*DecidedValue_Shard)(nil),
	}
	file_blocks_proto_msgTypes[10].OneofWrappers = []any{
		(*ReadNodeMessage_DecidedValue)(nil),
	}
	file_blocks_proto_msgTypes[11].OneofWrappers = []any{
		(*ConsensusMessage_Vote)(nil),
		(*ConsensusMessage_Proposal)(nil),
	}
	file_blocks_proto_msgTypes[14].OneofWrappers = []any{
		(*BlockEventData_HeartbeatEventBody)(nil),
		(*BlockEventData_MergeMessageEventBody)(nil),
	}
	file_blocks_proto_msgTypes[25].OneofWrappers = []any{
		(*MempoolMessage_UserMessage)(nil),
	}
	file_blocks_proto_msgTypes[29].OneofWrappers = []any{
		(*SyncRequest_Value)(nil),
		(*SyncRequest_VoteSet)(nil),
	}
	file_blocks_proto_msgTypes[32].OneofWrappers = []any{
		(*SyncResponse_Value)(nil),
		(*SyncResponse_VoteSet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blocks_proto_rawDesc), len(file_blocks_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blocks_proto_goTypes,
		DependencyIndexes: file_blocks_proto_depIdxs,
		EnumInfos:         file_blocks_proto_enumTypes,
		MessageInfos:      file_blocks_proto_msgTypes,
	}.Build()
	File_blocks_proto = out.File
	file_blocks_proto_goTypes = nil
	file_blocks_proto_depIdxs = nil
}
