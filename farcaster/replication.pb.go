// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.32.0
// source: replication.proto

package farcaster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetShardSnapshotMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShardId       uint32                 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardSnapshotMetadataRequest) Reset() {
	*x = GetShardSnapshotMetadataRequest{}
	mi := &file_replication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardSnapshotMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardSnapshotMetadataRequest) ProtoMessage() {}

func (x *GetShardSnapshotMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardSnapshotMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetShardSnapshotMetadataRequest) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{0}
}

func (x *GetShardSnapshotMetadataRequest) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

type ShardSnapshotMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShardId       uint32                 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Height        uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ShardChunk    *ShardChunk            `protobuf:"bytes,5,opt,name=shard_chunk,json=shardChunk,proto3,oneof" json:"shard_chunk,omitempty"`
	Block         *Block                 `protobuf:"bytes,6,opt,name=block,proto3,oneof" json:"block,omitempty"`
	NumItems      uint64                 `protobuf:"varint,7,opt,name=num_items,json=numItems,proto3" json:"num_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardSnapshotMetadata) Reset() {
	*x = ShardSnapshotMetadata{}
	mi := &file_replication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardSnapshotMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardSnapshotMetadata) ProtoMessage() {}

func (x *ShardSnapshotMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardSnapshotMetadata.ProtoReflect.Descriptor instead.
func (*ShardSnapshotMetadata) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{1}
}

func (x *ShardSnapshotMetadata) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardSnapshotMetadata) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ShardSnapshotMetadata) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ShardSnapshotMetadata) GetShardChunk() *ShardChunk {
	if x != nil {
		return x.ShardChunk
	}
	return nil
}

func (x *ShardSnapshotMetadata) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ShardSnapshotMetadata) GetNumItems() uint64 {
	if x != nil {
		return x.NumItems
	}
	return 0
}

type GetShardSnapshotMetadataResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Snapshots     []*ShardSnapshotMetadata `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardSnapshotMetadataResponse) Reset() {
	*x = GetShardSnapshotMetadataResponse{}
	mi := &file_replication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardSnapshotMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardSnapshotMetadataResponse) ProtoMessage() {}

func (x *GetShardSnapshotMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardSnapshotMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetShardSnapshotMetadataResponse) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{2}
}

func (x *GetShardSnapshotMetadataResponse) GetSnapshots() []*ShardSnapshotMetadata {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type GetShardTransactionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shard + height of the snapshot. Only those combinations returned from the `GetShardSnapshotMetadata`
	// are valid
	ShardId uint32 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The trie prefix to iterate under. Only leaf node keys under this sub tree will be returned.
	TrieVirtualShard uint32 `protobuf:"varint,3,opt,name=trie_virtual_shard,json=trieVirtualShard,proto3" json:"trie_virtual_shard,omitempty"`
	// If NONE, then start from the left-most leaf node under the prefix
	PageToken     *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardTransactionsRequest) Reset() {
	*x = GetShardTransactionsRequest{}
	mi := &file_replication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardTransactionsRequest) ProtoMessage() {}

func (x *GetShardTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetShardTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{3}
}

func (x *GetShardTransactionsRequest) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *GetShardTransactionsRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetShardTransactionsRequest) GetTrieVirtualShard() uint32 {
	if x != nil {
		return x.TrieVirtualShard
	}
	return 0
}

func (x *GetShardTransactionsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetShardTransactionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of trie keys and its associated message
	TrieMessages []*ShardTrieEntryWithMessage `protobuf:"bytes,1,rep,name=trie_messages,json=trieMessages,proto3" json:"trie_messages,omitempty"`
	// For each (unique) FID that was sent in `messages` above, that FID's account root
	// hash in the trie.
	FidAccountRoots []*FidAccountRootHash `protobuf:"bytes,2,rep,name=fid_account_roots,json=fidAccountRoots,proto3" json:"fid_account_roots,omitempty"`
	// If this is None, all entries under the prefix have been returned
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardTransactionsResponse) Reset() {
	*x = GetShardTransactionsResponse{}
	mi := &file_replication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardTransactionsResponse) ProtoMessage() {}

func (x *GetShardTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetShardTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{4}
}

func (x *GetShardTransactionsResponse) GetTrieMessages() []*ShardTrieEntryWithMessage {
	if x != nil {
		return x.TrieMessages
	}
	return nil
}

func (x *GetShardTransactionsResponse) GetFidAccountRoots() []*FidAccountRootHash {
	if x != nil {
		return x.FidAccountRoots
	}
	return nil
}

func (x *GetShardTransactionsResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type ShardTrieEntryWithMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The trie key of the leaf node.
	TrieKey []byte `protobuf:"bytes,1,opt,name=trie_key,json=trieKey,proto3" json:"trie_key,omitempty"`
	// This should always be present, will be None only if a trie key's message
	// was not found in the DB, which should be never happen..
	//
	// Types that are valid to be assigned to TrieMessage:
	//
	//	*ShardTrieEntryWithMessage_UserMessage
	//	*ShardTrieEntryWithMessage_OnChainEvent
	//	*ShardTrieEntryWithMessage_FnameTransfer
	TrieMessage   isShardTrieEntryWithMessage_TrieMessage `protobuf_oneof:"trie_message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardTrieEntryWithMessage) Reset() {
	*x = ShardTrieEntryWithMessage{}
	mi := &file_replication_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardTrieEntryWithMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardTrieEntryWithMessage) ProtoMessage() {}

func (x *ShardTrieEntryWithMessage) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardTrieEntryWithMessage.ProtoReflect.Descriptor instead.
func (*ShardTrieEntryWithMessage) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{5}
}

func (x *ShardTrieEntryWithMessage) GetTrieKey() []byte {
	if x != nil {
		return x.TrieKey
	}
	return nil
}

func (x *ShardTrieEntryWithMessage) GetTrieMessage() isShardTrieEntryWithMessage_TrieMessage {
	if x != nil {
		return x.TrieMessage
	}
	return nil
}

func (x *ShardTrieEntryWithMessage) GetUserMessage() *Message {
	if x != nil {
		if x, ok := x.TrieMessage.(*ShardTrieEntryWithMessage_UserMessage); ok {
			return x.UserMessage
		}
	}
	return nil
}

func (x *ShardTrieEntryWithMessage) GetOnChainEvent() *OnChainEvent {
	if x != nil {
		if x, ok := x.TrieMessage.(*ShardTrieEntryWithMessage_OnChainEvent); ok {
			return x.OnChainEvent
		}
	}
	return nil
}

func (x *ShardTrieEntryWithMessage) GetFnameTransfer() *FnameTransfer {
	if x != nil {
		if x, ok := x.TrieMessage.(*ShardTrieEntryWithMessage_FnameTransfer); ok {
			return x.FnameTransfer
		}
	}
	return nil
}

type isShardTrieEntryWithMessage_TrieMessage interface {
	isShardTrieEntryWithMessage_TrieMessage()
}

type ShardTrieEntryWithMessage_UserMessage struct {
	UserMessage *Message `protobuf:"bytes,2,opt,name=user_message,json=userMessage,proto3,oneof"`
}

type ShardTrieEntryWithMessage_OnChainEvent struct {
	OnChainEvent *OnChainEvent `protobuf:"bytes,3,opt,name=on_chain_event,json=onChainEvent,proto3,oneof"`
}

type ShardTrieEntryWithMessage_FnameTransfer struct {
	FnameTransfer *FnameTransfer `protobuf:"bytes,4,opt,name=fname_transfer,json=fnameTransfer,proto3,oneof"`
}

func (*ShardTrieEntryWithMessage_UserMessage) isShardTrieEntryWithMessage_TrieMessage() {}

func (*ShardTrieEntryWithMessage_OnChainEvent) isShardTrieEntryWithMessage_TrieMessage() {}

func (*ShardTrieEntryWithMessage_FnameTransfer) isShardTrieEntryWithMessage_TrieMessage() {}

type FidAccountRootHash struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Fid             uint64                 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	AccountRootHash []byte                 `protobuf:"bytes,2,opt,name=account_root_hash,json=accountRootHash,proto3" json:"account_root_hash,omitempty"`
	NumMessages     uint64                 `protobuf:"varint,3,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FidAccountRootHash) Reset() {
	*x = FidAccountRootHash{}
	mi := &file_replication_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FidAccountRootHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidAccountRootHash) ProtoMessage() {}

func (x *FidAccountRootHash) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidAccountRootHash.ProtoReflect.Descriptor instead.
func (*FidAccountRootHash) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{6}
}

func (x *FidAccountRootHash) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FidAccountRootHash) GetAccountRootHash() []byte {
	if x != nil {
		return x.AccountRootHash
	}
	return nil
}

func (x *FidAccountRootHash) GetNumMessages() uint64 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

type ReplicationTriePartStatus struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShardId          uint32                 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Height           uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	VirtualTrieShard uint32                 `protobuf:"varint,3,opt,name=virtual_trie_shard,json=virtualTrieShard,proto3" json:"virtual_trie_shard,omitempty"`
	NextPageToken    *string                `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	// These fields are used by the client to store the progress in the DB
	LastResponse  uint32  `protobuf:"varint,5,opt,name=last_response,json=lastResponse,proto3" json:"last_response,omitempty"` // The WorkUnitResponse from the last pass
	LastFid       *uint64 `protobuf:"varint,6,opt,name=last_fid,json=lastFid,proto3,oneof" json:"last_fid,omitempty"`          // The last FID processed (to continue from last pass)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationTriePartStatus) Reset() {
	*x = ReplicationTriePartStatus{}
	mi := &file_replication_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationTriePartStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationTriePartStatus) ProtoMessage() {}

func (x *ReplicationTriePartStatus) ProtoReflect() protoreflect.Message {
	mi := &file_replication_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationTriePartStatus.ProtoReflect.Descriptor instead.
func (*ReplicationTriePartStatus) Descriptor() ([]byte, []int) {
	return file_replication_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationTriePartStatus) GetShardId() uint32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ReplicationTriePartStatus) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ReplicationTriePartStatus) GetVirtualTrieShard() uint32 {
	if x != nil {
		return x.VirtualTrieShard
	}
	return 0
}

func (x *ReplicationTriePartStatus) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ReplicationTriePartStatus) GetLastResponse() uint32 {
	if x != nil {
		return x.LastResponse
	}
	return 0
}

func (x *ReplicationTriePartStatus) GetLastFid() uint64 {
	if x != nil && x.LastFid != nil {
		return *x.LastFid
	}
	return 0
}

var File_replication_proto protoreflect.FileDescriptor

var file_replication_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x01, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x58, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x65,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x69, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72,
	0x69, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x69, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x74,
	0x72, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x66,
	0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0f, 0x66, 0x69, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe5, 0x01,
	0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x69, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0e,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x46, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x8f, 0x02, 0x0a,
	0x19, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x54, 0x72, 0x69, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x64, 0x32, 0xca,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_replication_proto_rawDescOnce sync.Once
	file_replication_proto_rawDescData []byte
)

func file_replication_proto_rawDescGZIP() []byte {
	file_replication_proto_rawDescOnce.Do(func() {
		file_replication_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_replication_proto_rawDesc), len(file_replication_proto_rawDesc)))
	})
	return file_replication_proto_rawDescData
}

var file_replication_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_replication_proto_goTypes = []any{
	(*GetShardSnapshotMetadataRequest)(nil),  // 0: GetShardSnapshotMetadataRequest
	(*ShardSnapshotMetadata)(nil),            // 1: ShardSnapshotMetadata
	(*GetShardSnapshotMetadataResponse)(nil), // 2: GetShardSnapshotMetadataResponse
	(*GetShardTransactionsRequest)(nil),      // 3: GetShardTransactionsRequest
	(*GetShardTransactionsResponse)(nil),     // 4: GetShardTransactionsResponse
	(*ShardTrieEntryWithMessage)(nil),        // 5: ShardTrieEntryWithMessage
	(*FidAccountRootHash)(nil),               // 6: FidAccountRootHash
	(*ReplicationTriePartStatus)(nil),        // 7: ReplicationTriePartStatus
	(*ShardChunk)(nil),                       // 8: ShardChunk
	(*Block)(nil),                            // 9: Block
	(*Message)(nil),                          // 10: Message
	(*OnChainEvent)(nil),                     // 11: OnChainEvent
	(*FnameTransfer)(nil),                    // 12: FnameTransfer
}
var file_replication_proto_depIdxs = []int32{
	8,  // 0: ShardSnapshotMetadata.shard_chunk:type_name -> ShardChunk
	9,  // 1: ShardSnapshotMetadata.block:type_name -> Block
	1,  // 2: GetShardSnapshotMetadataResponse.snapshots:type_name -> ShardSnapshotMetadata
	5,  // 3: GetShardTransactionsResponse.trie_messages:type_name -> ShardTrieEntryWithMessage
	6,  // 4: GetShardTransactionsResponse.fid_account_roots:type_name -> FidAccountRootHash
	10, // 5: ShardTrieEntryWithMessage.user_message:type_name -> Message
	11, // 6: ShardTrieEntryWithMessage.on_chain_event:type_name -> OnChainEvent
	12, // 7: ShardTrieEntryWithMessage.fname_transfer:type_name -> FnameTransfer
	0,  // 8: ReplicationService.GetShardSnapshotMetadata:input_type -> GetShardSnapshotMetadataRequest
	3,  // 9: ReplicationService.GetShardTransactions:input_type -> GetShardTransactionsRequest
	2,  // 10: ReplicationService.GetShardSnapshotMetadata:output_type -> GetShardSnapshotMetadataResponse
	4,  // 11: ReplicationService.GetShardTransactions:output_type -> GetShardTransactionsResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_replication_proto_init() }
func file_replication_proto_init() {
	if File_replication_proto != nil {
		return
	}
	file_message_proto_init()
	file_onchain_event_proto_init()
	file_blocks_proto_init()
	file_replication_proto_msgTypes[1].OneofWrappers = []any{}
	file_replication_proto_msgTypes[3].OneofWrappers = []any{}
	file_replication_proto_msgTypes[4].OneofWrappers = []any{}
	file_replication_proto_msgTypes[5].OneofWrappers = []any{
		(*ShardTrieEntryWithMessage_UserMessage)(nil),
		(*ShardTrieEntryWithMessage_OnChainEvent)(nil),
		(*ShardTrieEntryWithMessage_FnameTransfer)(nil),
	}
	file_replication_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_replication_proto_rawDesc), len(file_replication_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_replication_proto_goTypes,
		DependencyIndexes: file_replication_proto_depIdxs,
		MessageInfos:      file_replication_proto_msgTypes,
	}.Build()
	File_replication_proto = out.File
	file_replication_proto_goTypes = nil
	file_replication_proto_depIdxs = nil
}
